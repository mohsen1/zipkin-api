swagger: "2.0"
info:
  version: "1.0.0"
  title: Zipkin API
  description: |
    Zipkin's Query api is rooted at `api/v1`, on a host that by default listens on port 9411. It primarily serves zipkin-web, although it includes a POST endpoint that can receive spans.
host: localhost:9411
basePath: /api/v1
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /services:
    get:
      description: |
        Returns a list of all service names associated with annotations.
      responses:
        200:
          description: Succes
          schema:
            type: array
            items:
              type: string
        400:
          description: Bad Request Error
  /spans:
    get:
      parameters:
      - name: serviceName
        in: query
        required: true
        description: |
          Ex zipkin-web (required) - service that logged an annotation in the span.
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
        400:
          description: Bad Request Error
  /traces:
    get:
      description: |
          Invoking this request retrieves traces matching the below filters.

          Results should be filtered against endTs, subject to limit and lookback. For example, if endTs is 10:20 today, limit is 10, and lookback is 7 days, traces returned should be those nearest to 10:20 today, not 10:20 a week ago.

          Time units of endTs and lookback are milliseconds as opposed to microseconds, the grain of Span.timestamp. Milliseconds is a more familiar and supported granularity for query, index and windowing functions
      parameters:
        - name: serviceName
          in: query
          required: true
          description: service name
          type: string
        - name: annotationQuery
          in: query
          type: string
          description: |
             Ex. `http.uri=/foo and retried` - If key/value (has an `=`), constrains against Span.binaryAnnotations of time string. If just a word, constrains against Span.annotations. Any values are AND against eachother. This means a span in the trace must match all of these.
        - name: minDuration
          in: query
          type: integer
          description: |
             Ex. 100000 (for 100ms). Only return traces whose Span.duration is greater than or equal to minDuration microseconds.
        - name: maxDuration
          in: query
          type: integer
          description: |
            Only return traces whose Span.duration is less than or equal to maxDuration microseconds. Only valid with minDuration.
        - name: endTs
          in: query
          type: string
          description: |
            Only return traces where all Span.timestamp are at or before this time in epoch milliseconds. Defaults to current time.
        - name: lookback
          type: string
          in: query
          description: |
            Only return traces where all  Span.timestamp are at or after (endTs - * lookback) in milliseconds. Defaults to endTs, limited to a system parameter QUERY_LOOKBACK

        - name: limit
          in: query
          default: 10
          type: integer
          description: |
            Maximum number of traces to return. Defaults to 10
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ListOfTracesLists"

definitions:
  Annotation:
    type: object
    properties:
      endpoint:
        type: object
        properties:
          serviceName:
            type: string
          ipv4:
            type: string
          port:
            type: integer
      timestamp:
        type: integer
      value:
        type: string
        
  BinaryAnnotation:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
      endpoint:
        $ref: '#/definitions/Endpoint'
  
  Endpoint:
    type: object
    properties:
      serviceName:
        type: string
      ipv4:
        type: string
      port:
        type: integer
        
  TraceList:
    type: array
    items: 
      $ref: "#/definitions/Trace"
      
  Trace:
    type: object
    properties:
      traceId:
        type: string
      name:
        type: string
      id:
        type: string
      timestamp:
        type: integer
      duration:
        type: integer
      debug:
        type: boolean
      annotations:
        title: ListOfAnnotations
        type: array
        items:
          $ref: '#/definitions/Annotation'
      binaryAnnotations:
        title: ListOfBinaryAnnotations
        type: array
        items:
          $ref: '#/definitions/BinaryAnnotation'
          
  ListOfTracesLists:
    type: array
    items:
      $ref: '#/definitions/TraceList'
